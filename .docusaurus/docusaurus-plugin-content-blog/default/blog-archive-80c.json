{
  "blogPosts": [
    {
      "id": "dark mode",
      "metadata": {
        "permalink": "/blog/dark mode",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-03-02-blog-2/index.md",
        "source": "@site/blog/2023-03-02-blog-2/index.md",
        "title": "Ví dụ về Dark mode trong lập trình ứng dụng web",
        "description": "Lời mở đầu",
        "date": "2023-03-02T00:00:00.000Z",
        "formattedDate": "March 2, 2023",
        "tags": [
          {
            "label": "html",
            "permalink": "/blog/tags/html"
          },
          {
            "label": "css",
            "permalink": "/blog/tags/css"
          },
          {
            "label": "js",
            "permalink": "/blog/tags/js"
          },
          {
            "label": "vue",
            "permalink": "/blog/tags/vue"
          }
        ],
        "readingTime": 9.21,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Cuong Dinh Viet",
            "title": "Front End Developer @ GHTK",
            "url": "https://github.com/vietcuongk99",
            "imageURL": "https://github.com/vietcuongk99.png",
            "key": "vietcuong"
          }
        ],
        "frontMatter": {
          "slug": "dark mode",
          "title": "Ví dụ về Dark mode trong lập trình ứng dụng web",
          "authors": [
            "vietcuong"
          ],
          "tags": [
            "html",
            "css",
            "js",
            "vue"
          ]
        },
        "nextItem": {
          "title": "Tạo project Vue 3 sử dụng Webpack",
          "permalink": "/blog/create vue project from scratch"
        }
      },
      "content": "## Lời mở đầu {#introduce}\r\n\r\nChuyển đổi Dark Mode (chế độ tối) là một tính năng hữu ích, xuất hiện hầu hết trên các website ngày nay, ví dụ như:\r\n\r\n- Google\r\n\r\n![google](google.png)\r\n\r\n- Google (Dark mode)\r\n\r\n![googledark](google_darkmode.png)\r\n\r\n- Facebook\r\n\r\n![facebook](facebook.png)\r\n\r\n- Facebook (Dark mode)\r\n\r\n![facebookdark](facebook_darkmode.png)\r\n\r\nDark Mode luôn là một trong tính năng ưu thích của mình khi sử dụng web cũng như trong phát triển web app. Bản thân mình luôn chú ý tới nó mỗi khi truy cập bất kì website nào.\r\nMột phần vì mình không muốn khi lướt web trong phòng tối lại gặp phải tình huống dưới đây😅: \r\n\r\n<p align=\"center\">\r\n  <img src=\"https://media3.giphy.com/media/3o7aD10MUdyqqpaqJO/giphy.gif?cid=ecf05e47s8d4dw56t9t59p8ed67t6h7amwh9r3kae43h9y1q&rid=giphy.gif&ct=g\" />\r\n</p>\r\n\r\nKhá là khó chịu cho mắt phải không 😬 Chắc hẳn chúng ta đều sẽ gặp phải tình huống website có theme (chủ đề) quá sáng dù ít hay nhiều.\r\nVì vậy, mình sẽ đưa ra một ví dụ đơn giản cho chức năng chuyển đổi Dark Mode trong lập trình ứng dụng web, giúp cải thiện trải nghiệm cho người dùng.\r\n\r\n## Dark Mode với HTML, CSS, JS {#darkmode-with-html-css-js}\r\n\r\nTrong phần này, mình sẽ đưa ra cách tạo một button (nút) bật/ tắt chế độ Dark Mode, chỉ với HTML, CSS, JS. Mình cũng sẽ sử dụng thêm công cụ là Codepen.\r\nCodepen hỗ trợ việc khởi tạo cũng như thực thi project với HTML, CSS, JS nhanh gọn và trực quan hơn.\r\nBạn có thể truy cập vào [đây](https://codepen.io/pen/) để sử dụng, hoàn toàn miễn phí 😄.\r\n\r\nĐây sẽ là kết quả của chúng ta trong phần này:\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://i.imgur.com/1Bq43ih.gif\" />\r\n</p>\r\n\r\n### Bước 1: Thêm HTML, CSS, FontAwesome\r\nĐầu tiên, chúng ta cài đặt [FontAwesome](https://fontawesome.com/search?o=r&m=free) và chuyển bộ CSS preprocessors của Codepen sang SCSS,\r\ngiúp code CSS của chúng ta rõ ràng và rành mạch hơn (đọc thêm về SCSS tại [đây](https://sass-lang.com/documentation/style-rules)):\r\n\r\n![setupcss](setup_css.png)\r\n\r\nBắt đầu với HTML, chúng ta sẽ cần tạo 2 phần, nút bật/ tắt Dark Mode và dòng chữ hiển thị:\r\n\r\n```html\r\n<div class=\"toggle-wrapper\">\r\n  <input id=\"toggle\" type=\"checkbox\" checked />\r\n  <label class=\"label\" for=\"toggle\">\r\n    <span class=\"toggle-btn\"></span>\r\n    <i class=\"fa-solid fa-sun label-icon sun\"></i>\r\n    <i class=\"fa-solid fa-moon label-icon moon\"></i>\r\n  </label>\r\n</div>\r\n<div id=\"content\">Sample</div>\r\n```\r\nỞ đây mình tạo một checkbox bằng thẻ `<input>` với `checked`. Tiếp đến, ta cần thẻ `<label>` biểu diễn nội dung của checkbox này.\r\nCuối cùng, một thẻ `<div>` với id là `content` sẽ hiển thị dòng chữ ta muốn.\r\n\r\nVới CSS, chúng ta sẽ bổ sung code như dưới đây:\r\n\r\n```css\r\n:root {\r\n  --text-color: #000;\r\n  --background-color: #fff;\r\n  --toggle-bg-color: #000;\r\n}\r\n\r\nbody {\r\n  font-family: system-ui;\r\n  background: var(--background-color);\r\n  color: var(--text-color);\r\n  transition: 0.3s linear;\r\n  height: 100vh;\r\n  margin: 0;\r\n  display: grid;\r\n  place-items: center;\r\n}\r\n\r\n#content {\r\n  font-size: 2rem;\r\n}\r\n\r\n```\r\nTa khai báo và gán mã màu cho các biến `--background-color`, `--toggle-bg-color` và `--text-color` thuộc phần tử `root`, ở đây chính là thành phần `<html>`.\r\nTrong phần sau, chúng ta sẽ thay đổi giá trị các biến này, tuỳ vào từng theme cụ thể.\r\nHiện tại, nội dung của chúng ta chỉ đơn giản như sau:\r\n\r\n![step1](step1.png)\r\n\r\n### Bước 2: Style cho checkbox\r\n\r\nThẻ `<span>` với class `toggle-btn` chính là hiển thị \"nút\" bật/tắt.\r\nChúng ta sẽ thêm code CSS nhằm style cho thẻ này và các icon vừa thêm như dưới đây:\r\n\r\n```css\r\n.label {\r\n  width: 4rem;\r\n  height: 2rem;\r\n  background-color: var(--toggle-bg-color);\r\n  border-radius: 14px;\r\n  display: flex;\r\n  position: relative;\r\n  cursor: pointer;\r\n  align-items: center;\r\n\r\n  .toggle-btn {\r\n    position: absolute;\r\n    background-color: #fff;\r\n    height: 1.6rem;\r\n    width: 1.85rem;\r\n    border-radius: 14px;\r\n    left: 0.25rem;\r\n    transition: linear 0.2s;\r\n  }\r\n\r\n  .label-icon {\r\n    width: 2rem;\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n  }\r\n}\r\n\r\n.sun {\r\n  color: #fcb021;\r\n}\r\n\r\n.moon {\r\n  color: #f2f4f5;\r\n}\r\n```\r\n\r\n![step2](step2.png)\r\n\r\nTiếp đến, chúng ta thêm style nhằm \"giấu\" checkbox.\r\n\r\n```css\r\n.toggle-wrapper {\r\n  position: relative;\r\n  zoom: 3;\r\n}\r\n\r\ninput#toggle {\r\n  opacity: 0;\r\n  position: absolute;\r\n}\r\n```\r\n\r\nCuối cùng, ta thêm đoạn code CSS như ảnh dưới để định nghĩa hai theme ta muốn chuyển đổi thông qua thuộc tính `data-theme`, ở đây là `dark` và `light`.\r\n\r\nCác biến CSS mà ta đã khai báo từ trước đó sẽ được gán các mã màu tương ứng với từng theme cụ thể.\r\nVới theme `light`, chúng ta thêm ``transform: translateX(1.7rem);`` cho class `toggle-btn`, nhằm tạo chuyển động tịnh tiến cho \"nút\" bật/ tắt mỗi khi `data-theme` thay đổi:\r\n\r\n```css\r\n[data-theme=\"dark\"] {\r\n  --text-color: #fff;\r\n  --background-color: #272a34;\r\n  --toggle-bg-color: #373838;\r\n}\r\n\r\n[data-theme=\"light\"] {\r\n  --text-color: #000;\r\n  --background-color: #fff;\r\n  --toggle-bg-color: #c3e4fa;\r\n\r\n  .toggle-btn {\r\n    transform: translateX(1.7rem);\r\n  }\r\n}\r\n```\r\n\r\n### Bước 3: Xử lý sự kiện với JS\r\n\r\nTa bổ sung thêm dòng code JS dưới đây, đặt `data-theme` mặc định cho thành phần `<html>` là `light`:\r\n\r\n```js\r\ndocument.documentElement.setAttribute(\"data-theme\", \"light\");\r\n```\r\n\r\nĐây là kết quả của chúng ta:\r\n\r\n![step3](step3.png)\r\n\r\nNhưng chúng ta chưa thực sự chuyển đổi được sang Dark Mode. Để làm được điều đó,\r\nta cần thêm đoạn code JS phần xử lý cho sự kiện `change` cho checkbox:\r\n\r\n```js\r\ndocument.getElementById(\"content\").innerHTML = \"☀️ Day\";\r\nconst toggle = document.getElementById(\"toggle\");\r\n\r\ntoggle.addEventListener(\"change\", (e) => {\r\n  if (!e.target.checked) {\r\n    document.documentElement.setAttribute(\"data-theme\", \"dark\");\r\n    document.getElementById(\"content\").innerHTML = \"Night 🌑\";\r\n  } else {\r\n    document.documentElement.setAttribute(\"data-theme\", \"light\");\r\n    document.getElementById(\"content\").innerHTML = \"☀️ Day\";\r\n  }\r\n});\r\n```\r\n\r\nTrong phần xử lý sự kiện `change`, `data-theme` là `light` khi checkbox `checked`, ngược lại, `data-theme` là `dark` khi ta bỏ `checked`.\r\n\r\nBạn có thể tuỳ chỉnh nội dung trong phần tử có id `content` tuỳ ý với từng `data-theme`.\r\n\r\nKết quả cuối cùng của chúng ta:\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://i.imgur.com/1Bq43ih.gif\" />\r\n</p>\r\n\r\nMọi người có thể vào [đây](https://codepen.io/vietcuongk99/pen/qBMroBd) để xem sample code của mình.\r\n\r\n\r\n## Dark Mode với Vue.js {#darkmode-with-vuejs}\r\n\r\nTrong phần này, mình sẽ triển khai Dark Mode cho một project sử dụng JavaScript framework.\r\nFramework mà mình lựa chọn là **Vue.js**, vì mình đang sử dụng framework này trong hầu hết các project hiện tại (đọc thêm về Vue.js tại [đây](https://vuejs.org/guide/introduction.html)).\r\n\r\nĐây là [kết quả](https://vue3-simple-darkmode.vercel.app/) chúng ta có được sau phần này:\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://i.imgur.com/F5XVaDa.gif\" />\r\n</p>\r\n\r\n### Bước 1: Khởi tạo project\r\n\r\nĐầu tiên, chúng ta cần khởi tạo project Vue. Bạn có thể thực hiện theo hướng dẫn trên trang chủ của Vue tại [đây](https://vuejs.org/guide/quick-start.html#using-vue-from-cdn),\r\nhoặc bạn có thể tham khảo [source code](https://github.com/vietcuongk99/vue3-from-scratch) project Vue 3 mà mình sẽ sử dụng trong phần này.\r\n\r\nChúng ta sẽ cài đặt thêm [FontAwesome](https://fontawesome.com/) cho Vue 3 để sử dụng hai icon ☀️ và 🌑 giống như trong phần trước. Chi tiết hướng dẫn cài đặt bạn có thể xem tại [đây](https://fontawesome.com/docs/web/use-with/vue/#free-icon-packages).\r\n\r\nSau khi cài đặt xong, chúng ta sẽ có kết quả như sau:\r\n\r\n- `./main.js`\r\n```js\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\n/* import font awesome icon component */\r\nimport { FontAwesomeIcon } from '@fortawesome/vue-fontawesome'\r\nimport {faSun, faMoon} from \"@fortawesome/free-solid-svg-icons\";\r\nlibrary.add(faSun, faMoon)\r\n\r\nimport { createApp } from 'vue';\r\nimport App from './App.vue'\r\n\r\ncreateApp(App)\r\n  .component('font-awesome-icon', FontAwesomeIcon)\r\n  .mount('#app')\r\n\r\n```\r\n\r\n### Bước 2: Thêm file mới\r\n\r\nChúng ta sẽ tạo thêm các thư mục như bên dưới:\r\n\r\n- `assets/image`: chứa hình ảnh.\r\n- `assets/style`: chứa file style đuôi css, scss,...\r\n- `components`: chứa các component Vue.\r\n\r\n![structure.png](project_structure.png)\r\n\r\nTrong thư mục `./assets/image`, chúng ta sẽ thêm logo Vue.js và hai background ứng với từng chủ đề `dark` và `light`,\r\ntải xuống tại [đây](https://github.com/vietcuongk99/vue3-simple-darkmode/tree/main/src/assets/image).\r\n\r\nTrong thư mục `./assets/style`, chúng ta sẽ thêm các file `.scss` như sau:\r\n\r\n- `default.scss`: style mặc định cho project:\r\n\r\n```css\r\n:root {\r\n  --text-color: #000;\r\n  --background-color: #fff;\r\n  --toggle-bg-color: #000;\r\n}\r\n\r\nbody {\r\n  font-family: Roboto, Arial, sans-serif;\r\n  background: var(--background-color);\r\n  color: var(--text-color);\r\n  transition: 0.3s linear;\r\n  height: 100vh;\r\n  margin: 0;\r\n}\r\n```\r\n\r\n- `theme.scss`: định nghĩa theme cho project\r\n\r\n```css\r\n[data-theme=\"dark\"] {\r\n  --text-color: #fff;\r\n  --background-color: #272a34;\r\n  --toggle-bg-color: #373838;\r\n}\r\n\r\n[data-theme=\"light\"] {\r\n  --text-color: #000;\r\n  --background-color: #fff;\r\n  --toggle-bg-color: #c3e4fa;\r\n}\r\n```\r\n\r\n- `main.scss`: import các file style cần cho project\r\n\r\n```css\r\n@import 'default.scss';\r\n@import 'theme.scss';\r\n```\r\n\r\nVà đừng quên, chúng ta cần thêm dòng `import` file `./main.scss` như sau:\r\n\r\n- `./main.js`\r\n\r\n```js\r\nimport './assets/style/main.scss'\r\n```\r\n\r\n\r\nTrong thư mục `./components`, mình thêm component `ThemeToggle`, làm nút bật/ tắt Dark Mode.\r\nBạn có thể dùng bất kì tên nào phù hợp hơn.\r\n\r\n```js\r\n<template>\r\n  <div class=\"toggle-wrapper\">\r\n    <input id=\"toggle\" type=\"checkbox\" checked @change=\"change\" />\r\n    <label class=\"label\" for=\"toggle\">\r\n      <span class=\"toggle-btn\"></span>\r\n      <font-awesome-icon icon=\"fa-solid fa-sun\" class=\"label-icon sun\" />\r\n      <font-awesome-icon icon=\"fa-solid fa-moon\" class=\"label-icon moon\" />\r\n    </label>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: \"ThemeToggle\",\r\n  props: {\r\n    primaryTheme: String,\r\n    secondaryTheme: String,\r\n  },\r\n\r\n  setup (props) {\r\n    const change = (event) => {\r\n      if (!event.target.checked) document.documentElement.setAttribute(\"data-theme\", props.secondaryTheme);\r\n      if (event.target.checked) document.documentElement.setAttribute(\"data-theme\", props.primaryTheme);\r\n    }\r\n\r\n    return {\r\n      change,\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n.toggle-wrapper {\r\n  position: relative;\r\n  zoom: 1.5;\r\n  top: 0;\r\n  right: 0;\r\n}\r\n\r\ninput#toggle {\r\n  opacity: 0;\r\n  position: absolute;\r\n}\r\n\r\n.label {\r\n  width: 4rem;\r\n  height: 2rem;\r\n  background-color: var(--toggle-bg-color);\r\n  border-radius: 14px;\r\n  display: flex;\r\n  position: relative;\r\n  cursor: pointer;\r\n  align-items: center;\r\n\r\n  .toggle-btn {\r\n    position: absolute;\r\n    background-color: #fff;\r\n    height: 1.6rem;\r\n    width: 1.85rem;\r\n    border-radius: 14px;\r\n    left: 0.25rem;\r\n    transition: linear 0.2s;\r\n  }\r\n\r\n  .label-icon {\r\n    width: 2rem;\r\n    text-align: center;\r\n    font-size: 1.2rem;\r\n  }\r\n}\r\n\r\n.sun {\r\n  color: #fcb021;\r\n}\r\n\r\n.moon {\r\n  color: #f2f4f5;\r\n}\r\n\r\n[data-theme=\"light\"] {\r\n  .toggle-btn {\r\n    transform: translateX(1.7rem);\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n```\r\n\r\nVề cơ bản, các logic code ứng với từng phần đều tương tự như ở phần [trước](#darkmode-with-html-css-js):\r\n- Trong phần `<template>`, chúng ta sử dụng component `<font-awesome-icon>` thay cho thẻ `<i>` để hiển thị icon.\r\n- Trong phần `<script>`,  hai `prop` là `primaryTheme` và `secondaryTheme`, gán cho thuộc tính `data-theme` của phần tử `html` ứng với hai trường hợp `checked` của checkbox.\r\n\r\n### Bước 3: Cập nhật App.vue\r\n\r\nỞ file `./App.vue`, chúng ta sẽ cập nhật lại như dưới đây:\r\n\r\n```js\r\n<template>\r\n  <div class=\"theme-toggle-wrapper\">\r\n    <img alt=\"Vue logo\" class=\"logo\" src=\"./assets/image/logo.svg\" width=\"50\" height=\"50\" />\r\n    <ThemeToggle :primary-theme=\"primaryTheme\" :secondary-theme=\"secondaryTheme\"/>\r\n  </div>\r\n  <div class=\"background\"></div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue'\r\nimport ThemeToggle from \"./components/ThemeToggle.vue\";\r\nexport default {\r\n  components: {ThemeToggle},\r\n  setup () {\r\n    const primaryTheme = ref('light')\r\n    const secondaryTheme = ref('dark')\r\n    return {\r\n      primaryTheme,\r\n      secondaryTheme,\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    document.documentElement.setAttribute(\"data-theme\", this.primaryTheme);\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.theme-toggle-wrapper {\r\n  position: absolute;\r\n  top: 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 1rem;\r\n  width: calc(100% - 2rem);\r\n}\r\n.background {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  transition: all 0.5s ease;\r\n}\r\n\r\n[data-theme=\"dark\"] {\r\n  .background {\r\n    background-image: url(\"assets/image/night.jpg\");\r\n  }\r\n}\r\n\r\n[data-theme=\"light\"] {\r\n  .background {\r\n    background-image: url(\"assets/image/day.jpg\");\r\n  }\r\n}\r\n\r\n</style>\r\n\r\n```\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://i.imgur.com/F5XVaDa.gif\" />\r\n</p>\r\n\r\nQua hình trên, chúng ta bổ sung logo Vue, component `ThemeToggle` làm nút bật/ tắt Dark Mode và style chuyển đổi thuộc tính `background-image` với từng `data-theme`.\r\nỞ hook `mounted`, chúng ta sẽ gán `primaryTheme` cho `data-theme` mặc định, ở đây mình chọn `primaryTheme` là `light`.\r\n\r\nVậy là xong 😊. Cấu trúc project của chúng ta sẽ như dưới đây. Mở cmd và gõ dòng lệnh `npm run dev` để chạy project của bạn.\r\n\r\n![structurefinal](project_structure_final.png)\r\n\r\nBạn có thể tham khảo source code của mình tại [đây](https://github.com/vietcuongk99/vue3-simple-darkmode).\r\n\r\n\r\n## Tổng kết {#summary}\r\n\r\nThông qua bài viết này, mình đã đưa ra một ví dụ và cách triển khai Dark Mode trong lập trình web app.\r\nHi vọng các bạn có thêm cách tham khảo để triển khai tính năng hữu ích này, giúp trải nghiệm người dùng trên website của chúng ta được tốt hơn.\r\n\r\nBên cạnh đó, việc chuyển đổi Dark Mode đã được các thư viện UI hỗ trợ rất linh hoạt, ví dụ như [Ant Design](https://ant.design/docs/react/customize-theme), [MUI](https://mui.com/material-ui/customization/theming/), [Vuetify](https://vuetifyjs.com/en/features/theme/),...\r\nTrong các bài viết sắp tới, mình sẽ đưa ra ví dụ cho việc áp dụng chúng vào trong project về web app. \r\n\r\nPeace."
    },
    {
      "id": "create vue project from scratch",
      "metadata": {
        "permalink": "/blog/create vue project from scratch",
        "editUrl": "https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-02-16-create-vue-project-from-scratch/index.md",
        "source": "@site/blog/2023-02-16-create-vue-project-from-scratch/index.md",
        "title": "Tạo project Vue 3 sử dụng Webpack",
        "description": "Lời mở đầu",
        "date": "2023-02-16T00:00:00.000Z",
        "formattedDate": "February 16, 2023",
        "tags": [
          {
            "label": "vue",
            "permalink": "/blog/tags/vue"
          },
          {
            "label": "webpack",
            "permalink": "/blog/tags/webpack"
          }
        ],
        "readingTime": 6.985,
        "hasTruncateMarker": false,
        "authors": [
          {
            "name": "Cuong Dinh Viet",
            "title": "Front End Developer @ GHTK",
            "url": "https://github.com/vietcuongk99",
            "imageURL": "https://github.com/vietcuongk99.png",
            "key": "vietcuong"
          }
        ],
        "frontMatter": {
          "slug": "create vue project from scratch",
          "title": "Tạo project Vue 3 sử dụng Webpack",
          "authors": [
            "vietcuong"
          ],
          "tags": [
            "vue",
            "webpack"
          ]
        },
        "prevItem": {
          "title": "Ví dụ về Dark mode trong lập trình ứng dụng web",
          "permalink": "/blog/dark mode"
        }
      },
      "content": "## Lời mở đầu\r\n[Vue.js](https://vuejs.org/guide/introduction.html) là một framework Javascript được tạo ra bởi Evan You, giúp xây dựng giao diện người dùng.\r\n\r\nVue có hai phiên bản, Vue 2 (ra mắt năm 2016) và Vue 3 (2020 ra mắt beta, 2022 ra mắt [chính thức](https://blog.vuejs.org/posts/vue-3-as-the-new-default.html)). Ngoài ra, Vue được sử dụng để tạo giao diện người dùng với nhiều [mục đích](https://vuejs.org/guide/extras/ways-of-using-vue.html#), tuỳ vào một số nhu cầu của người sử dụng nó.\r\n\r\nTrong phạm vi bài viết, chúng ta tập trung vào việc tạo một project Vue cho phát triển ứng dụng web. Phiên bản Vue được lựa chọn sẽ là phiên bản mới nhất - Vue 3.\r\n\r\nVậy, chúng ta có cách nào để tạo một project Vue? Dưới đây là lựa chọn trên trang chủ của Vue:\r\n\r\n- [Vue.js](https://vuejs.org/guide/quick-start.html)\r\n\r\n````js\r\nnpm init vue@latest\r\n````\r\n\r\n<p align=\"center\">\r\n  <img src=\"https://media.giphy.com/media/zcCGBRQshGdt6/giphy.gif\" alt=\"animated\" />\r\n</p>\r\n\r\nThật dễ dàng phải không nào ? Chỉ với một dòng lệnh, npm sẽ thực thi [create-vue](https://github.com/vuejs/create-vue), giúp chúng ta khởi tạo project Vue rất thuận tiện.\r\nMột số câu hỏi cấu hình cho project sẽ do bạn chọn hoặc được tự động thực hiện, giúp giảm thời gian khởi tạo và cấu hình project.\r\n\r\n<p align=\"center\">\r\n  <q><i>Life is not that easy</i></q> 😳\r\n</p>\r\n\r\nTuy nhiên, nếu project của chúng ta mở rộng hơn trong tương lai? Sẽ có các vấn đề xảy đến, ví dụ bạn cần cấu hình cho project có nhiều hơn một entry point, hoặc cố gắng cải thiện hiệu suất,...\r\n\r\nTrong trường hợp trên, tốt hơn hết là chúng ta nên tạo project Vue từ đầu, cùng với công cụ là webpack. Bạn có thể đọc chi tiết về công cụ này tại đây:\r\n\r\n- [Webpack](https://webpack.js.org/)\r\n\r\n## Tạo thư mục chứa project\r\n\r\nTrước hết, chúng ta cần khởi tạo project và chuẩn bị cho việc cài đặt Vue cũng như các công cụ hỗ trợ.\r\n\r\nTạo mới thư mục tên 'vue3-from-scratch', hoặc bất cứ cái tên nào mà bạn thích. Mở CMD và gõ dòng lệch bên dưới, đảm bảo rằng bạn đã cài đặt [Node.js](https://nodejs.org/en/download/) nhé:\r\n\r\n````js\r\nnpm init\r\n````\r\n\r\nCác tuỳ chọn sẽ hiển thị tương tự như trong ảnh sau, bạn có thể lựa chọn không điền nếu muốn để mặc định:\r\n\r\n![npm-init](npm-init.png)\r\n\r\nTập tin `package.json` được tạo mới với thông tin như ảnh sau:\r\n\r\n![package-json](package-json.png)\r\n\r\n\r\n## Cài đặt webpack\r\n\r\nTrong phần này, chúng ta sẽ bắt đầu cài đặt webpack. Webpack được mô tả trong [tài liệu](https://webpack.js.org/concepts/) là một 'static module bundler'.\r\n\r\n:::info\r\nMột cách dễ hiểu, trong quá trình code, bạn sẽ cần khai báo, sử dụng image, font, các module hoặc thư viện đã cài tại rất nhiều file khác nhau của project.\r\nWebpack coi chúng là 'dependency' (phụ thuộc).\r\nTừ những 'dependency' này, Webpack sẽ tạo nên một 'dependency graph', tạm hiểu như một mô hình liên kết, bao gồm toàn bộ các module mà project cần, đóng gói chúng lại thành một hoặc một số file.\r\n\r\n![webpack-bundle](webpack-bundle.png)\r\n\r\n:::\r\n\r\nWebpack cung cấp các gói cài đặt cần thiết, bao gồm `webpack dev server` và `webpack-cli`.\r\n\r\n- `webpack dev server`: dev server hỗ trợ hot loading\r\n- `webpack-cli`: công cụ cung cấp các dòng lệnh của webpack\r\n\r\nChạy câu lệnh dưới đây trên cmd để cài đặt hai gói trên:\r\n\r\n````js\r\nnpm install webpack webpack-cli webpack-dev-server\r\n````\r\n\r\nTiếp theo chúng ta sẽ tạo file cấu hình webpack cho project, đó là `webpack.config.js`\r\n\r\n````js\r\n// webpack.config.js\r\nconst path = require('path')\r\nmodule.exports = {\r\n  mode: 'development',\r\n  entry: './src/main.js',\r\n  output: {\r\n    path: path.resolve(__dirname, './dist'),\r\n    filename: 'bundle.js'\r\n  },\r\n  devServer: {\r\n    static: {       \r\n      directory: path.resolve(__dirname, './dist')\r\n    }\r\n  }\r\n}\r\n````\r\n\r\nChúng ta sẽ chú ý tới ba mục chính: entry, output và devServer.\r\nKhi chúng ta khởi chạy project, Webpack đọc file `./src/main.js` và sinh ra file `bundle.js` trong thư mục `./dist`.\r\nĐồng thời, cấu hình của devServer được dùng khi chúng ta chạy project trên dev server.\r\n\r\nVề cơ bản thì chúng ta đã sẵn sàng để thực hiện 'bundle' (đóng gói) các file js. Tiếp tục khởi tạo thư mục `src` và file `./src/main.js`.\r\n\r\n```js\r\n// ./src/main.js\r\nconsole.log('Hello World');\r\n```\r\n\r\nĐể khởi chạy project, chúng ta sẽ bổ sung thêm một số đoạn lệnh cho file `package.json`\r\n\r\n````json\r\n{\r\n  \"scripts\": {\r\n    \"dev\": \"webpack serve\",\r\n    \"build\": \"webpack --mode production --progress --hide-modules\"\r\n  }\r\n}\r\n````\r\nCuối cùng, tạo file HTML đơn giản trong thư mục `/dist` với thẻ `script` gắn với file `bundle.js`.\r\n\r\n````html\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\r\n    <title>TITLE HERE</title>\r\n  </head>\r\n  <body>\r\n    <script src=\"./bundle.js\"></script>\r\n  </body>\r\n</html>\r\n````\r\n\r\nChạy câu lệnh `npm run dev` trên cmd. Mở trình duyệt của bạn và truy cập vào [http://localhost:8080/](http://localhost:8080/)\r\n\r\n![localhost-8080](localhost-8080.png)\r\n\r\n## Cài đặt Vue\r\n\r\nMở cmd, chạy câu lệnh sau để cài đặt Vue. Chúng ta sẽ chọn phiên bản Vue mới nhất hiện tại là Vue 3\r\n\r\n````js\r\nnpm install --save vue@next\r\n````\r\n\r\n:::tip\r\nMột số tài liệu hướng dẫn yêu cầu bạn cài thêm gói cài đặt `vue/compiler-sfc`. Tuy nhiên, với Vue 3, cụ thể là từ phiên bản `3.2.13+`, `vue/compiler-sfc` được tích hợp trong gói cài đặt `vue`. Vì vậy chúng ta không cần cài đặt riêng gói này nữa.\r\n:::\r\n\r\nĐến đây, chúng ta cần cài đặt thêm `vue-loader`:\r\n\r\n````js\r\nnpm install -D vue-loader\r\n````\r\n\r\n`vue-loader` là một loader cho webpack, cho phép chúng ta tạo các file `.vue` dưới định dạng [Single-File Component](https://vue-loader.vuejs.org/spec.html), như ví dụ dưới đây:\r\n\r\n````js\r\n<template>\r\n  <div class=\"example\">Hello World</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {}\r\n}\r\n</script>\r\n\r\n<style>\r\n.example {\r\n  color: green;\r\n}\r\n</style>\r\n````\r\n\r\nNếu bạn muốn tìm hiểu chi tiết hơn về `vue-loader`, bạn có thể truy cập tại [đây](https://vue-loader.vuejs.org/).\r\n\r\nTiếp đến, chúng ta cần bổ sung thêm cấu hình cho file `webpack.config.js`:\r\n\r\n````js\r\nmodule: {\r\n  rules: [\r\n    // ... other rules\r\n    {\r\n      test: /\\.vue$/,\r\n      loader: 'vue-loader'\r\n    }\r\n  ]\r\n},\r\nplugins: [\r\n  // make sure to include the plugin!\r\n  new VueLoaderPlugin()\r\n]\r\n````\r\nChúng ta sẽ cập nhật lại file `./src/main.js` với nội dung như bên dưới:\r\n\r\n````js\r\nimport { createApp } from 'vue';\r\n\r\nimport App from './App.vue'\r\n\r\ncreateApp(App).mount('#app')\r\n````\r\n\r\n:::info\r\nBất cứ một project Vue nào khi được build sẽ đều tạo một `instance` mới với phương thức `createApp` do `vue` cung cấp.\r\n\r\nObject chúng ta truyền vào phương thức `createApp` thực chất là một `component`. Bất kì project Vue nào cũng cần một `root component`, chứa các `component` mà chúng ta sẽ thêm vào khi mở rộng project.\r\n\r\nTrong thực tế, các project Vue bao gồm rất nhiều `component`, được tổ chức dưới dạng `tree`. Trong ảnh dưới, `root component` ở đây là `./src/App.vue`:\r\n\r\n![tree-components](tree-components.png)\r\n:::\r\n\r\nQuay trở lại với nội dung của file `./src/main.js`, `instance` Vue khởi tạo từ `createApp` sẽ thực thi phương thức `mount`.\r\nTham số truyền vào cho phương thức này có thể là một phần tử `DOM` hoặc chuỗi `selector`. Trong ví dụ cụ thể trên, chúng ta mong muốn nội dung của `root component` App.vue sẽ được hiển thị bên trong phần tử DOM có id `app`.\r\n\r\nĐó chính là phần tử DOM có id `app` bên trong file `./dist/index.html`:\r\n\r\n![element-id-app](element-id-app.png)\r\n\r\n\r\n\r\nVà cuối cùng, chúng ta khởi tạo file `./src/App.vue` với định dạng SFC mà ta đề cập khi cài đặt `vue-loader`.\r\nNội dung hiển thị là dòng chữ `Vue app`:\r\n\r\n````js\r\n<template>\r\n  <div>Vue app</div>\r\n</template>\r\n\r\n<script>\r\nimport { defineComponent } from 'vue'\r\n\r\nexport default defineComponent({\r\n  template: `<div class=\"example\">App</div>`\r\n})\r\n</script>\r\n````\r\n\r\nVậy là xong 😁. Cấu trúc project Vue của bạn sẽ trông tương tự như của mình dưới đây:\r\n\r\n![project-structure](project-structure.png)\r\n\r\nChạy câu lệnh `npm run dev` trên cmd. Dòng chữ `Vue app` sẽ hiển thị trên trình duyệt của bạn.\r\n\r\n![vue-first-build](vue-first-build.png)\r\n\r\nProject Vue đã được build và run thành công 😁.\r\n\r\nSource code tham khảo: [Github](https://github.com/vietcuongk99/vue-from-scratch)\r\n\r\n## Tổng kết\r\n\r\nThông qua bài viết này, mình đã cùng các bạn tạo một project Vue từ đầu tới cuối với công cụ webpack.\r\nTừ đây, bạn có thể mở rộng project theo cách bạn muốn.\r\n\r\nVới việc tạo một project Vue từ đầu, bạn sẽ có một cái nhìn cụ thể hơn về cách mà Vue và công cụ `bundle` như webpack giúp chúng ta xây dựng project giao diện người dùng, hiểu được cách mà project được build và chạy như thế nào. Bạn sẽ có thêm kiến thức cơ bản để tự cấu hình cho project của mình thay vì phụ thuộc vào những tuỳ chỉnh mặc định mà Vue cung cấp.\r\n\r\nPeace."
    }
  ]
}